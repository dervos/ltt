/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gebak_000
 */
public class Passenger extends javax.swing.JPanel {

    private int selection;

    List<model.Passenger> passengerList = model.Passenger.getPassengerList();

    /**
     * Creates new form Passenger
     */
    public Passenger() {
        initComponents();
        refreshPassengerList();
        addPassengerItemsToTable();
        PASSENGER_TABLE.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    }
    
    /**
     * 
     */
    public void refresh() {
        removeAllFromPassengerTable();
        refreshPassengerList();
        addPassengerItemsToTable();
    }

    /**
     * Refreshes passengers in table.
     */
    public void refreshPassengerList() {
        try {
            passengerList = model.PassengerDAO.readAll();
        } catch (SQLException ex) {
            System.err.println("Error getting passenger list: " + ex.getMessage());
        }
    }

    /**
     * 
     * @param id
     * @throws SQLException 
     */
    public void refreshWithSearch(int id) throws SQLException {
        removeAllFromPassengerTable();
        passengerList.clear();
        passengerList.add(model.PassengerDAO.readById(id));
    }

    /**
     * 
     */
    public void addPassengerItemsToTable() {

        for (model.Passenger passenger : passengerList) {
            addPassengerToTable(passenger);
        }
    }

    /**
     * Adds the new row
     * @param row contains the new row's information
     */
    private void addRow(Object[] row) {
        ((javax.swing.table.DefaultTableModel) PASSENGER_TABLE.getModel()).addRow(row);
    }

    /**
     * Fills a row
     * @param passenger 
     */
    public void addPassengerToTable(model.Passenger passenger) {
        DateFormat df = new SimpleDateFormat("MM-dd-yyyy");
        Object[] newRow = new Object[10];
        newRow[0] = passenger.getPassengerid();
        newRow[1] = passenger.getSurname();
        newRow[2] = passenger.getInsertion();
        newRow[3] = passenger.getName();
        newRow[4] = passenger.getGender();
        newRow[5] = df.format(passenger.getDob());
        newRow[6] = passenger.getMobphone();
        newRow[7] = passenger.getHomephone();

        try {
            newRow[8] = model.AddressDAO.readById(passenger.getHomeaddressid()).getStreetname();
        } catch (SQLException ex) {

        }
        try {
            newRow[9] = model.AddressDAO.readById(passenger.getTempaddressid()).getStreetname();
        } catch (SQLException ex) {

        }

        addRow(newRow);
    }

    /**
     * 
     */
    public void removeAllFromPassengerTable() {
        DefaultTableModel dtm = (DefaultTableModel) PASSENGER_TABLE.getModel();
        int rows = dtm.getRowCount();

        for (int i = rows - 1; i >= 0; i--) {

            dtm.removeRow(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        PASSENGER_TABLE = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        REFRESH_BUTTON = new javax.swing.JButton();

        PASSENGER_TABLE.setAutoCreateRowSorter(true);
        PASSENGER_TABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Surname", "", "Name", "Gender", "DoB", "Mob", "Tel", "Home", "Temp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PASSENGER_TABLE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PASSENGER_TABLEMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PASSENGER_TABLEMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(PASSENGER_TABLE);
        if (PASSENGER_TABLE.getColumnModel().getColumnCount() > 0) {
            PASSENGER_TABLE.getColumnModel().getColumn(0).setResizable(false);
            PASSENGER_TABLE.getColumnModel().getColumn(2).setResizable(false);
        }

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        REFRESH_BUTTON.setText("Refresh Table");
        REFRESH_BUTTON.setFocusable(false);
        REFRESH_BUTTON.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        REFRESH_BUTTON.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        REFRESH_BUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REFRESH_BUTTONActionPerformed(evt);
            }
        });
        jToolBar1.add(REFRESH_BUTTON);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void REFRESH_BUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REFRESH_BUTTONActionPerformed
        refresh();
    }//GEN-LAST:event_REFRESH_BUTTONActionPerformed

    private void PASSENGER_TABLEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PASSENGER_TABLEMouseClicked
        
    }//GEN-LAST:event_PASSENGER_TABLEMouseClicked

    private void PASSENGER_TABLEMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PASSENGER_TABLEMousePressed
        JTable jtable = (JTable) evt.getSource();
        int row = jtable.getSelectedRow();
        selection = Integer.parseInt(jtable.getValueAt(row, 0).toString());
        System.out.println(selection);
        main.LuggageTrackerTool2.getInstance().updatePassengerInformationPanel(selection);
    }//GEN-LAST:event_PASSENGER_TABLEMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PASSENGER_TABLE;
    private javax.swing.JButton REFRESH_BUTTON;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
